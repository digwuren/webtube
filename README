This is Webtube, a Ruby implementation of the WebSocket protocol defined in RFC 6455.


== Sample client

(Also see [[wsc]], a basic command line utility for talking to WebSocket
servers and included with the Webtube distribution.)

  require 'webtube'

  $webtube = Webtube.connect 'ws://echo.websocket.org/'
  $webtube.send_message 'Hello, echo server!'

  class << $listener = Object.new
    def onmessage webtube, message, opcode
      puts "The echo server says: #{message.inspect}"
      # We only care about one message.
      $webtube.close
      return
    end
  end
  $webtube.run $listener


== Sample server

(This code is also available as a separate file; see [[sample-server.rb]].)

  #! /usr/bin/ruby

  # A sample WEBrick server using the Webtube API.  It listens on port 8888 and
  # provides two services: [[/diag]], which logs all the events from
  # [[Webtube#run]] and remains silent towards the client (although note that
  # the Webtube library pongs the pings), and [[/echo]], which echos.

  require 'webrick'
  require 'webrick/httpservlet'
  require 'webtube/webrick'
  require 'set'

  class << diagnostic_listener = Object.new
    def respond_to? name
      return (name.to_s =~ /^on/ or super)
    end

    def method_missing name, *args
      output = "- #{name}("
      args.each_with_index do |arg, i|
        output << ', ' unless i.zero?
        if i.zero? and arg.is_a? Webtube then
          output << arg.to_s
        else
          output << arg.inspect
        end
      end
      output << ")"
      puts output
      return
    end
  end

  class << echo_listener = Object.new
    def onmessage webtube, data, opcode
      webtube.send_message data, opcode
      return
    end
  end

  server = WEBrick::HTTPServer.new(:Port => 8888)
  server.mount_webtube '/diag', diagnostic_listener
  server.mount_webtube '/echo', echo_listener

  begin
    server.start
  ensure
    server.shutdown
  end
